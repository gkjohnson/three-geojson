import{P as m,S as p,W as f,O as h,D as u,A as g,G as L,a as S,M as b,B as x,V as M,C}from"./GeoJSONLoader-BOrNbtGm.js";const i=new m(70,window.innerWidth/window.innerHeight,.01,1e3);i.position.z=2;const s=new p,n=new f({antialias:!0});n.setAnimationLoop(D);document.body.appendChild(n.domElement);const R=new C,o=new h(i,n.domElement);o.minDistance=1;o.enableDamping=!0;o.autoRotate=!0;const l=new u(16777215,3.5);l.position.set(1,2,3);const z=new g(16777215,1);s.add(l,z);const e=new L;s.add(e);const y=new URL(""+new URL("world-EVCf79-S.geojson",import.meta.url).href,import.meta.url);new S().loadAsync(y).then(r=>{r.features.filter(t=>t.properties.name==="Japan").flatMap(t=>t.polygons).forEach(t=>{const d=t.getMeshObject({thickness:1});d.material=new b,e.add(d)});const a=new x;a.setFromObject(e),a.getCenter(e.position).multiplyScalar(-1);const c=new M;a.getSize(c),e.scale.setScalar(1/Math.max(...c)),e.position.multiplyScalar(e.scale.x),console.log(r)});w();window.addEventListener("resize",w);function D(){o.update(Math.min(R.getDelta(),64/1e3)),n.render(s,i)}function w(){n.setSize(window.innerWidth,window.innerHeight),n.setPixelRatio(window.devicePixelRatio),i.aspect=window.innerWidth/window.innerHeight,i.updateProjectionMatrix()}
